/*
 * FILE
 *  monitor/monitor.js
 *
 * PURPOSE
 *  Implements the Pulsar Monitor service. This service can be publicly probed
 *  for live statistics on any Pulsar instance with the service enabled.
 *
 * LICENSE
 *  Copyright (C) 2014 Rob Colbert <rob.isConnected@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

'use strict';

var RouteAssembler = require('../expressjs/route-assembler');
var os = require('os');
var fs = require('fs');

function Monitor (app, config) {

  var self = this;

  this.app = app;
  this.config = config;
  this.history = [ ];

  if (!this.config.monitor.enabled) {
    return;
  }

  var route = new RouteAssembler(app);
  route.add({
    'method': 'GET',
    'uri': config.monitor.mountPoint,
    'controllerMethod': function (req, res) { self.probe(req, res); }
  });
}

Monitor.prototype.probe = function probe (req, res) {

  var self = this;
  function gigabytes (value) { return (value / (1024.0 * 1000.0 * 1000.0)).toFixed(2); }

  var response = { };

  response.os = {
    'hostname': { 'current': os.hostname() },
    'type': { 'current': os.type() },
    'platform': { 'current': os.platform() },
    'arch': { 'current': os.arch() },
    'uptime': { 'current': os.uptime() },
    'loadavg': { 'current': os.loadavg() },
    'totalmem': { 'current': gigabytes(os.totalmem()) },
    'freemem': { 'current': gigabytes(os.freemem()) },
    'cpus': { 'current': os.cpus() },
    'networkInterfaces': { 'current': os.networkInterfaces() }
  };

  response.net = { };
  fs.readFile('/proc/self/net/tcp', function (err, tcpData) {
    response.net.tcp = tcpData.toString().split('\n');
    //response.net.tcp.shift();
    self.history.unshift(response);
    while (self.history.length > (self.config.monitor.maxHistoryLength || 1)) {
      self.history.pop();
    }
    res.json(200, self.history);
  });
};

Monitor.prototype.integrateLastResponse = function (current, last) {
  if (this.lastResponse) {
    for (idx in this.lastResponse.os) {
      response.os[idx].last = this.lastResponse.os[idx].current;
    }
  }
  this.lastResponse = response;
};

module.exports = exports = Monitor;
