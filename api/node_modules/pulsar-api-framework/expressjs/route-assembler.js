// expressjs/route-assembler.js
// Copyright (C) 2014 Rob Colbert <rob.isConnected@gmail.com>
// License: MIT

function RouteAssembler (app, config) {
  var self = this;

  self.app = app;
  self.log = app.log;
  self.config = config;

  self.routes = {
    'post': [ ],
    'get': [ ],
    'put': [ ],
    'delete': [ ]
  };
}

RouteAssembler.prototype.add = function (route) {
  var self = this;

  self.log.info('-> route ' + route.method, route.uri);

  if (typeof route.controllerMethod !== 'function') {
    self.log.error('ERROR: invalid/undefined controller method', route);
    return;
  }

  switch (route.method) {
    case 'POST':
      self.app.post(route.uri, route.controllerMethod);
      self.routes['post'].push(route.uri);
      break;

    case 'GET':
      self.app.get(route.uri, route.controllerMethod);
      self.routes['get'].push(route.uri);
      break;

    case 'PUT':
      self.app.put(route.uri, route.controllerMethod);
      self.routes['put'].push(route.uri);
      break;

    case 'DELETE':
      self.app.delete(route.uri, route.controllerMethod);
      self.routes['delete'].push(route.uri);
      break;

    default:
      self.log.error('unsupported HTTP method for route: ', route);
      break;
  }
};

RouteAssembler.prototype.detach = function ( ) {
  var self = this;
  var idx, path;

  function detachRouteMethodGroup (methodName, myRoutes, appRoutes) {
    while (myRoutes.length > 0) {
      path = myRoutes.pop();
      for (idx = appRoutes.length - 1; idx; --idx) {
        if (appRoutes[idx].path === path) {
          self.app.log.debug('-1 route ' + methodName, path);
          appRoutes.splice(idx, 1);
          break;
        }
      }
    }
  }

  detachRouteMethodGroup('POST', self.routes.post, self.app.routes.post);
  detachRouteMethodGroup('GET', self.routes.get, self.app.routes.get);
  detachRouteMethodGroup('PUT', self.routes.put, self.app.routes.put);
  detachRouteMethodGroup('DELETE', self.routes.delete, self.app.routes.delete);

};

module.exports = exports = RouteAssembler;
