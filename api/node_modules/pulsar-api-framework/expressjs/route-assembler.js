/*
 * FILE
 *  expressjs/route-assembler.js
 *
 * PURPOSE
 *  Implements a utility object to assemble ExpressJS routes with a readable
 *  syntax that more closely resembles a configuration file than source code.
 *
 * LICENSE
 *  Copyright (C) 2014 Rob Colbert <rob.isConnected@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

function RouteAssembler (app, config) {
  this.app = app;
  this.log = app.log;
  this.config = config;
}

RouteAssembler.prototype.add = function (route) {
  this.log.info('route:', route.method, route.uri);

  if (route.controllerMethod == undefined) {
    this.log.error('ERROR: invalid/undefined controller method', route);
    return;
  }

  switch (route.method) {
    case 'POST':
      this.app.post(route.uri, route.controllerMethod);
      break;

    case 'GET':
      this.app.get(route.uri, route.controllerMethod);
      break;

    case 'PUT':
      this.app.put(route.uri, route.controllerMethod);
      break;

    case 'DELETE':
      this.app.delete(route.uri, route.controllerMethod);
      break;

    default:
      this.log.error('unsupported HTTP method for route: ', route);
      break;
  }
};

module.exports = exports = RouteAssembler;
