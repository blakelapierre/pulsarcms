// monitor/monitor.js
// Copyright (C) 2014 Rob Colbert <rob.isConnected@gmail.com>

var RouteAssembler = require('robcolbert-utils').expressjs.RouteAssembler;
var os = require('os');
var fs = require('fs');

function Monitor (app, config) {

  var self = this;

  this.app = app;
  this.config = config;
  this.history = [ ];

  if (!this.config.monitor.enabled) {
    return;
  }

  var route = new RouteAssembler(app);
  route.add({
    'method': 'GET',
    'uri': config.monitor.mountPoint,
    'controllerMethod': function (req, res) { self.probe(req, res); }
  });
}

Monitor.prototype.probe = function probe (req, res) {

  var self = this;
  function gigabytes (value) { return (value / (1024.0 * 1000.0 * 1000.0)).toFixed(2); }

  var response = { };

  response.os = {
    'hostname': { 'current': os.hostname() },
    'type': { 'current': os.type() },
    'platform': { 'current': os.platform() },
    'arch': { 'current': os.arch() },
    'uptime': { 'current': os.uptime() },
    'loadavg': { 'current': os.loadavg() },
    'totalmem': { 'current': gigabytes(os.totalmem()) },
    'freemem': { 'current': gigabytes(os.freemem()) },
    'cpus': { 'current': os.cpus() },
    'networkInterfaces': { 'current': os.networkInterfaces() }
  };

  response.net = { };
  fs.readFile('/proc/self/net/tcp', function (err, tcpData) {
    response.net.tcp = tcpData.toString().split('\n');
    //response.net.tcp.shift();
    self.history.unshift(response);
    while (self.history.length > (self.config.monitor.maxHistoryLength || 1)) {
      self.history.pop();
    }
    res.json(200, self.history);
  });
};

Monitor.prototype.integrateLastResponse = function (current, last) {
  if (this.lastResponse) {
    for (idx in this.lastResponse.os) {
      response.os[idx].last = this.lastResponse.os[idx].current;
    }
  }
  this.lastResponse = response;
};

module.exports = exports = Monitor;
